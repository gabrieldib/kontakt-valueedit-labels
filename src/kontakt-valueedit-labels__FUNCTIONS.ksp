{{ KOVELB }}
function fn_65e437_set_ve_label
    {   arguments: 
        fn_65e437.a.control_uiid
        fn_65e437.a.label_vu         // constant: 0 = ms, 1 = dB, etc
        fn_65e437.a.label_vu_uiid
        fn_65e437.a.ve_uiid          // value editable label
        fn_65e437.a.transform_type   // what are we transforming from/to; also follows constants
        fn_65e437.a.ms_max
    }
    fn_65e437.ev := real(fn_65e437.a.control_uiid -> value)
    select(fn_65e437.a.transform_type)
        case __LABEL_TRANSFORM_EV_MS
            fn_65e437.ms_divider := 1000000.0 / fn_65e437.a.ms_max
            fn_65e437.r.ve_value := int(fn_65e437.a.control_curved_value / fn_65e437.ms_divider + 0.5 )

        case __LABEL_TRANSFORM_EV_DB
            fn_65e437.db := 18.0 * log2(fn_65e437.ev/629960.524947) { considering -inf : +12dB }
            fn_65e437.r.ve_value := int(fn_65e437.db )
    end select

    fn_65e437.a.label_vu_uiid -> text  := label_value_units[fn_65e437.a.label_vu]
    fn_65e437.a.ve_uiid       -> value := fn_65e437.r.ve_value
end function

function fn_aaac5c_get_curved_value
    {   arguments
        fn_aaac5c.a.control_uiid    // the slider's uiid which value will be curved
        fn_aaac5c.a.control_range   // to store the max-min
        fn_aaac5c.a.curve_type      // for curve branching 
        fn_aaac5c.a.curve_exponent
        fn_aaac5c.r.curved_value
    }

    { we will use the range min later too}
    fn_aaac5c.control_range_min := real(fn_aaac5c.a.control_uiid -> min_value)

    fn_aaac5c.a.control_range := ...
        real(fn_aaac5c.a.control_uiid -> max_value) - fn_aaac5c.control_range_min

    fn_aaac5c.control_value := real(fn_aaac5c.a.control_uiid -> value)

    select(fn_aaac5c.a.curve_type)
        case __CURVE_EXPONENTIAL
            fn_aaac5c.r.curved_value :=                                                           ...
                pow(                                                                          ...
                    (fn_aaac5c.control_value - fn_aaac5c.control_range_min) / fn_aaac5c.a.control_range,  ...
                    fn_aaac5c.a.curve_exponent                                                    ...
                ) * fn_aaac5c.a.control_range + fn_aaac5c.control_range_min

    end select
end function

function fn_5762b1_get_inverse_curved_value_from_ve
    {
        fn_5762b1.a.ve_value
        fn_5762b1.a.ve_multiplicator // the number ve value needs to be multiplicated by to go back to the slider scale
        fn_5762b1.a.curve_type
        fn_5762b1.r.curved_value
    }

    fn_5762b1.ve_value               := real(fn_5762b1.a.ve_uiid -> value)
    fn_5762b1.control_value          := fn_5762b1.ve_value * fn_5762b1.a.ve_multiplicator
    fn_5762b1.parent_range_min_value := real(ve_labels_parent_sliders_uiid [fn_5762b1.a.ve_uiid - UIID_START] -> min_value)
    fn_5762b1.parent_range_max_value := real(ve_labels_parent_sliders_uiid [fn_5762b1.a.ve_uiid - UIID_START] -> max_value)

    fn_5762b1.a.control_range := fn_5762b1.parent_range_max_value - fn_5762b1.parent_range_min_value

    select(fn_5762b1.a.curve_type)
        case __CURVE_EXPONENTIAL
            fn_5762b1.r.ui_slider_value :=                                           ...
                int(                                                             ...
                    fn_5762b1.parent_range_min_value + fn_5762b1.a.control_range *       ...
                    pow(                                                         ...
                        (fn_5762b1.control_value - fn_5762b1.parent_range_min_value) / ...
                            fn_5762b1.a.control_range,                               ...
                            1.0 / fn_5762b1.a.curve_exponent                         ...
                    )                                                            ...
                )

    end select
end function